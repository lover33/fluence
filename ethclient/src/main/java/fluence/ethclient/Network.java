/*
 * Copyright 2018 Fluence Labs Limited
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package fluence.ethclient;

import io.reactivex.Flowable;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Bytes24;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.0.1.
 */
public class Network extends Contract {
    private static final String BINARY = "6080604052600160065560008054600160a060020a03191633179055613d068061002a6000396000f3006080604052600436106100ed5763ffffffff60e060020a6000350416630988ca8c81146100f257806318b919e91461015b578063217fe6c6146101e5578063243dcbf21461026057806324953eaa14610298578063286dd3f5146102ed578063715018a61461030e5780637a62bcff146103235780637b9417c8146103525780638da5cb5b146103735780639835b417146103a45780639914923b146104dc5780639b19251a1461069e578063bfc45a53146106bf578063c7c02e44146106d4578063e2683e921461073c578063e2ec6ec314610893578063f2fde38b146108e8578063f5b3b62114610909575b600080fd5b3480156100fe57600080fd5b5060408051602060046024803582810135601f8101859004850286018501909652858552610159958335600160a060020a031695369560449491939091019190819084018382808284375094975061091e9650505050505050565b005b34801561016757600080fd5b5061017061098c565b6040805160208082528351818301528351919283929083019185019080838360005b838110156101aa578181015183820152602001610192565b50505050905090810190601f1680156101d75780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101f157600080fd5b5060408051602060046024803582810135601f810185900485028601850190965285855261024c958335600160a060020a03169536956044949193909101919081908401838280828437509497506109b19650505050505050565b604080519115158252519081900360200190f35b34801561026c57600080fd5b5061015960043567ffffffffffffffff196024351661ffff604435811690606435166084351515610a24565b3480156102a457600080fd5b506040805160206004803580820135838102808601850190965280855261015995369593946024949385019291829185019084908082843750949750610d9a9650505050505050565b3480156102f957600080fd5b50610159600160a060020a0360043516610de7565b34801561031a57600080fd5b50610159610e2e565b34801561032f57600080fd5b506101596004803590602480359160ff6044351691606435908101910135610e9a565b34801561035e57600080fd5b50610159600160a060020a0360043516611030565b34801561037f57600080fd5b50610388611074565b60408051600160a060020a039092168252519081900360200190f35b3480156103b057600080fd5b506103b9611083565b6040518080602001806020018060200180602001858103855289818151815260200191508051906020019060200280838360005b838110156104055781810151838201526020016103ed565b50505050905001858103845288818151815260200191508051906020019060200280838360005b8381101561044457818101518382015260200161042c565b50505050905001858103835287818151815260200191508051906020019060200280838360005b8381101561048357818101518382015260200161046b565b50505050905001858103825286818151815260200191508051906020019060200280838360005b838110156104c25781810151838201526020016104aa565b505050509050019850505050505050505060405180910390f35b3480156104e857600080fd5b506104f161161e565b6040518080602001806020018060200180602001806020018060200187810387528d818151815260200191508051906020019060200280838360005b8381101561054557818101518382015260200161052d565b5050505090500187810386528c818151815260200191508051906020019060200280838360005b8381101561058457818101518382015260200161056c565b5050505090500187810385528b818151815260200191508051906020019060200280838360005b838110156105c35781810151838201526020016105ab565b5050505090500187810384528a818151815260200191508051906020019060200280838360005b838110156106025781810151838201526020016105ea565b50505050905001878103835289818151815260200191508051906020019060200280838360005b83811015610641578181015183820152602001610629565b50505050905001878103825288818151815260200191508051906020019060200280838360005b83811015610680578181015183820152602001610668565b505050509050019c5050505050505050505050505060405180910390f35b3480156106aa57600080fd5b5061024c600160a060020a0360043516611b55565b3480156106cb57600080fd5b506104f1611b8c565b3480156106e057600080fd5b506106ec600435611e8a565b60408051602080825283518183015283519192839290830191858101910280838360005b83811015610728578181015183820152602001610710565b505050509050019250505060405180910390f35b34801561074857600080fd5b5061075460043561227c565b60408051888152602080820189905291810187905260e060608201818152875191830191909152865191929091608084019160a085019160c08601916101008701918b8201910280838360005b838110156107b95781810151838201526020016107a1565b50505050905001858103845288818151815260200191508051906020019060200280838360005b838110156107f85781810151838201526020016107e0565b50505050905001858103835287818151815260200191508051906020019060200280838360005b8381101561083757818101518382015260200161081f565b50505050905001858103825286818151815260200191508051906020019060200280838360005b8381101561087657818101518382015260200161085e565b505050509050019b50505050505050505050505060405180910390f35b34801561089f57600080fd5b5060408051602060048035808201358381028086018501909652808552610159953695939460249493850192918291850190849080828437509497506125989650505050505050565b3480156108f457600080fd5b50610159600160a060020a03600435166125e5565b34801561091557600080fd5b506103b9612605565b610988826001836040518082805190602001908083835b602083106109545780518252601f199092019160209182019101610935565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092209291505061283e565b5050565b6040805180820190915260098152600080516020613cbb833981519152602082015281565b6000610a1d836001846040518082805190602001908083835b602083106109e95780518252601f1990920191602091820191016109ca565b51815160209384036101000a6000190180199092169116179052920194855250604051938490030190922092915050612853565b9392505050565b610a2d33611b55565b1515610a83576040805160e560020a62461bcd02815260206004820152601e60248201527f5468652073656e646572206973206e6f7420696e2077686974656c6973740000604482015290519081900360640190fd5b60008581526003602052604090205415610ae7576040805160e560020a62461bcd02815260206004820152601f60248201527f54686973206e6f646520697320616c7265616479207265676973746572656400604482015290519081900360640190fd5b61ffff8083169084161115610b46576040805160e560020a62461bcd02815260206004820181905260248201527f506f72742072616e676520697320656d707479206f7220696e636f7272656374604482015290519081900360640190fd5b6040805160e08101825286815267ffffffffffffffff198616602080830191825261ffff80881684860181815288831660608701908152608087019283523360a0880190815289151560c0890190815260008f8152600388528a812099518a5597516001808b018054965195519751891660e060020a027fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff988a1660d060020a027fffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffff97909a1660c060020a0279ffff000000000000000000000000000000000000000000000000196801000000000000000090950477ffffffffffffffffffffffffffffffffffffffffffffffff19909916989098179390931696909617949094169690961794909416949094179091559151600290950180549151151560a060020a0274ff000000000000000000000000000000000000000019600160a060020a039790971673ffffffffffffffffffffffffffffffffffffffff199093169290921795909516179093556004805493840181559091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b909101879055815187815291517fb0cd47a7093fb93a9ce97304d3afb8df43e02e48502e47fd5fbb6c4020d935b59281900390910190a18015610d4b57610d4533612872565b50610d93565b600280546001810182556000919091527f405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace018590555b610d89612c66565b15610d9357610d81565b5050505050565b60008054600160a060020a03163314610db257600080fd5b5060005b815181101561098857610ddf8282815181101515610dd057fe5b90602001906020020151610de7565b600101610db6565b600054600160a060020a03163314610dfe57600080fd5b610e2b81604080519081016040528060098152602001600080516020613cbb83398151915281525061307f565b50565b600054600160a060020a03163314610e4557600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b610ea2613894565b610eab33611b55565b1515610f01576040805160e560020a62461bcd02815260206004820152601e60248201527f5468652073656e646572206973206e6f7420696e2077686974656c6973740000604482015290519081900360640190fd5b811580610f10575060ff841682145b1515610f8c576040805160e560020a62461bcd02815260206004820152602481018290527f6e756d626572206f662070696e6e6564206e6f6465732073686f756c6420626560448201527f207468652073616d65206173206465736972656420636c757374657253697a65606482015290519081900360840190fd5b6040805160a081018252878152602080820188905260ff871682840152336060830152825185820281810183019094528581529192608084019291879187918291908501908490808284378201915050505050508152509050610fee81613190565b1515611028576040805187815290517fd18fba5b22517a48b063e62f8b6acbfc4dbfba1583e929178d3fc862218544dd9181900360200190a15b505050505050565b600054600160a060020a0316331461104757600080fd5b610e2b81604080519081016040528060098152602001600080516020613cbb833981519152815250613353565b600054600160a060020a031681565b606080606080606060008060006110986138c4565b60608060608060006110a86138c4565b60006001600654036040519080825280602002602001820160405280156110e957816020015b6110d66138c4565b8152602001906001900390816110ce5790505b509b5060009a50600199505b6006548a101561140e5760018a039850600560008b6001026000191660001916815260200190815260200160002060e060405190810160405290816000820154600019166000191681526020016001820160a060405190810160405290816000820154600019166000191681526020016001820154600019166000191681526020016002820160009054906101000a900460ff1660ff1660ff1681526020016002820160019054906101000a9004600160a060020a0316600160a060020a0316600160a060020a031681526020016003820180548060200260200160405190810160405280929190818152602001828054801561121257602002820191906000526020600020905b815481526001909101906020018083116111fd575b5050505050815250508152602001600582015481526020016006820180548060200260200160405190810160405280929190818152602001828054801561127957602002820191906000526020600020905b81548152600190910190602001808311611264575b50505050508152602001600782018054806020026020016040519081016040528092919081815260200182805480156112e857602002820191906000526020600020905b8154680100000000000000000267ffffffffffffffff191681526001909101906020018083116112bd575b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561136857602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff168152602001906002019060208260010104928301926001038202915080841161132f5790505b50505050508152602001600982018054806020026020016040519081016040528092919081815260200182805480156113ca57602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116113ac575b5050505050815250509750878c8a8151811015156113e457fe5b9060200190602002018190525087602001516040015160ff168b019a5089806001019a50506110f5565b8a604051908082528060200260200182016040528015611438578160200160208202803883390190505b5096508a604051908082528060200260200182016040528015611465578160200160208202803883390190505b5095508a604051908082528060200260200182016040528015611492578160200160208202803883390190505b5094508a6040519080825280602002602001820160405280156114bf578160200160208202803883390190505b50935060009a50600092505b8b51831015611607578b838151811015156114e257fe5b906020019060200201519150600090505b8160800151518110156115fc57606082015180518290811061151157fe5b90602001906020020151878c81518110151561152957fe5b60209081029091010152608082015180518290811061154457fe5b90602001906020020151868c81518110151561155c57fe5b67ffffffffffffffff1990921660209283029091019091015260a082015180518290811061158657fe5b90602001906020020151858c81518110151561159e57fe5b61ffff90921660209283029091019091015260c08201518051829081106115c157fe5b90602001906020020151848c8151811015156115d957fe5b600160a060020a0390921660209283029091019091015260019a8b019a016114f3565b6001909201916114cb565b50949e939d50919b50995090975050505050505050565b60608060608060608060606000606080606080606080600061163e6138c4565b60016006540360405190808252806020026020018201604052801561167d57816020015b61166a6138c4565b8152602001906001900390816116625790505b509950600198505b60065489101561192657600089815260056020908152604091829020825160e08101845281548152835160a0810185526001830180548252600284015482860152600384015460ff8116838801526101009004600160a060020a03166060830152600484018054875181880281018801909852808852939694958781019593949293608086019390929183018282801561173f57602002820191906000526020600020905b8154815260019091019060200180831161172a575b505050505081525050815260200160058201548152602001600682018054806020026020016040519081016040528092919081815260200182805480156117a657602002820191906000526020600020905b81548152600190910190602001808311611791575b505050505081526020016007820180548060200260200160405190810160405280929190818152602001828054801561181557602002820191906000526020600020905b8154680100000000000000000267ffffffffffffffff191681526001909101906020018083116117ea575b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561189557602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff168152602001906002019060208260010104928301926001038202915080841161185c5790505b50505050508152602001600982018054806020026020016040519081016040528092919081815260200182805480156118f757602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116118d9575b5050505050815250508a60018b0381518110151561191157fe5b60209081029091010152600190980197611685565b8951604051908082528060200260200182016040528015611951578160200160208202803883390190505b509750895160405190808252806020026020018201604052801561197f578160200160208202803883390190505b50965089516040519080825280602002602001820160405280156119ad578160200160208202803883390190505b50955089516040519080825280602002602001820160405280156119db578160200160208202803883390190505b5094508951604051908082528060200260200182016040528015611a09578160200160208202803883390190505b5093508951604051908082528060200260200182016040528015611a37578160200160208202803883390190505b509250600091505b8951821015611b3e578982815181101515611a5657fe5b90602001906020020151905080600001518883815181101515611a7557fe5b6020908102909101015260408101518751889084908110611a9257fe5b6020908102909101810191909152810151518651879084908110611ab257fe5b60209081029091018101919091528181015101518551869084908110611ad457fe5b6020908102909101810191909152810151604001518451859084908110611af757fe5b60ff9092166020928302909101820152810151606001518351849084908110611b1c57fe5b600160a060020a03909216602092830290910190910152600190910190611a3f565b50959e949d50929b50909950975095509350505050565b6000611b8482604080519081016040528060098152602001600080516020613cbb8339815191528152506109b1565b90505b919050565b6060806060806060806060806060806060806000611ba8613909565b600454604080518281526020808402820101909152908015611bd4578160200160208202803883390190505b506004546040805182815260208084028201019091529199508015611c03578160200160208202803883390190505b506004546040805182815260208084028201019091529198508015611c32578160200160208202803883390190505b506004546040805182815260208084028201019091529197508015611c61578160200160208202803883390190505b506004546040805182815260208084028201019091529196508015611c90578160200160208202803883390190505b506004546040805182815260208084028201019091529195508015611cbf578160200160208202803883390190505b509250600091505b600454821015611e755760036000600484815481101515611ce457fe5b600091825260208083209091015483528281019390935260409182019020815160e0810183528154808252600183015467ffffffffffffffff19680100000000000000008202169583019590955261ffff60c060020a860481169483019490945260d060020a85048416606083015260e060020a909404909216608083015260020154600160a060020a03811660a083015260ff60a060020a90910416151560c08201528951909250899084908110611d9957fe5b60209081029091018101919091528101518751889084908110611db857fe5b67ffffffffffffffff1990921660209283029091019091015260408101518651879084908110611de457fe5b61ffff90921660209283029091019091015260608101518551869084908110611e0957fe5b61ffff90921660209283029091019091015260808101518451859084908110611e2e57fe5b61ffff90921660209283029091019091015260a08101518351849084908110611e5357fe5b600160a060020a03909216602092830290910190910152600190910190611cc7565b50959c949b5092995090975095509350915050565b6060611e94613909565b6060600080611ea16138c4565b6000878152600360209081526040808320815160e08101835281548152600182015467ffffffffffffffff19680100000000000000008202168286015261ffff60c060020a8204811683860181905260d060020a83048216606085015260e060020a909204811660808401819052600290940154600160a060020a03811660a085015260ff60a060020a90910416151560c08401528451919093039092168083528085028301909401909252909750908015611f67578160200160208202803883390190505b50945060009350600192505b60065483101561227057600083815260056020908152604091829020825160e08101845281548152835160a0810185526001830180548252600284015482860152600384015460ff8116838801526101009004600160a060020a03166060830152600484018054875181880281018801909852808852939694958781019593949293608086019390929183018282801561202d57602002820191906000526020600020905b81548152600190910190602001808311612018575b5050505050815250508152602001600582015481526020016006820180548060200260200160405190810160405280929190818152602001828054801561209457602002820191906000526020600020905b8154815260019091019060200180831161207f575b505050505081526020016007820180548060200260200160405190810160405280929190818152602001828054801561210357602002820191906000526020600020905b8154680100000000000000000267ffffffffffffffff191681526001909101906020018083116120d8575b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561218357602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff168152602001906002019060208260010104928301926001038202915080841161214a5790505b50505050508152602001600982018054806020026020016040519081016040528092919081815260200182805480156121e557602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116121c7575b5050505050815250509150600090505b81608001515181101561226557856020015167ffffffffffffffff191682608001518281518110151561222457fe5b9060200190602002015167ffffffffffffffff1916141561225d578151855160018601958791811061225257fe5b602090810290910101525b6001016121f5565b600190920191611f73565b50929695505050505050565b600080600060608060608061228f6138c4565b600089815260056020908152604091829020825160e08101845281548152835160a0810185526001830180548252600284015482860152600384015460ff8116838801526101009004600160a060020a03166060830152600484018054875181880281018801909852808852939694958781019593949293608086019390929183018282801561233f57602002820191906000526020600020905b8154815260019091019060200180831161232a575b505050505081525050815260200160058201548152602001600682018054806020026020016040519081016040528092919081815260200182805480156123a657602002820191906000526020600020905b81548152600190910190602001808311612391575b505050505081526020016007820180548060200260200160405190810160405280929190818152602001828054801561241557602002820191906000526020600020905b8154680100000000000000000267ffffffffffffffff191681526001909101906020018083116123ea575b505050505081526020016008820180548060200260200160405190810160405280929190818152602001828054801561249557602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff168152602001906002019060208260010104928301926001038202915080841161245c5790505b50505050508152602001600982018054806020026020016040519081016040528092919081815260200182805480156124f757602002820191906000526020600020905b8154600160a060020a031681526001909101906020018083116124d9575b50505091909252505081519192505060001061255d576040805160e560020a62461bcd02815260206004820152601860248201527f7468657265206973206e6f207375636820636c75737465720000000000000000604482015290519081900360640190fd5b602081810151805191015160408301516060840151608085015160a086015160c090960151949e939d50919b50995097509195509350915050565b60008054600160a060020a031633146125b057600080fd5b5060005b8151811015610988576125dd82828151811015156125ce57fe5b90602001906020020151611030565b6001016125b4565b600054600160a060020a031633146125fc57600080fd5b610e2b81613425565b606080606080606080606080600061261b613894565b600754604080518281526020808402820101909152908015612647578160200160208202803883390190505b506007546040805182815260208084028201019091529197508015612676578160200160208202803883390190505b5060075460408051828152602080840282010190915291965080156126a5578160200160208202803883390190505b5060075460408051828152602080840282010190915291955080156126d4578160200160208202803883390190505b509250600091505b60075482101561282e5760078054839081106126f457fe5b60009182526020918290206040805160a081018252600490930290910180548352600181015483850152600281015460ff811684840152600160a060020a036101009091041660608401526003810180548351818702810187019094528084529394919360808601939283018282801561278e57602002820191906000526020600020905b81548152600190910190602001808311612779575b5050505050815250509050806000015186838151811015156127ac57fe5b602090810290910181019190915281015185518690849081106127cb57fe5b60209081029091010152604081015184518590849081106127e857fe5b60ff9092166020928302909101909101526060810151835184908490811061280c57fe5b600160a060020a039092166020928302909101909101526001909101906126dc565b5093989297509095509350915050565b6128488282612853565b151561098857600080fd5b600160a060020a03166000908152602091909152604090205460ff1690565b600061287c613894565b60608060608060008061288d613909565b600160a060020a03808b16600090815260086020908152604091829020825160a08101845281548152600182015481840152600282015460ff811682860152610100900490941660608501526003810180548451818502810185019095528085529193608086019390929083018282801561292857602002820191906000526020600020905b81548152600190910190602001808311612913575b50505091909252505081519199505015156129465760009850612c59565b876040015160ff16604051908082528060200260200182016040528015612977578160200160208202803883390190505b509650876040015160ff166040519080825280602002602001820160405280156129ab578160200160208202803883390190505b509550876040015160ff166040519080825280602002602001820160405280156129df578160200160208202803883390190505b509450876040015160ff16604051908082528060200260200182016040528015612a13578160200160208202803883390190505b509350600092505b876040015160ff16831015612c47576080880151805184908110612a3b57fe5b6020908102909101810151600081815260038352604090819020815160e0810183528154808252600183015467ffffffffffffffff19680100000000000000008202169683019690965261ffff60c060020a870481169483019490945260d060020a86048416606083015260e060020a909504909216608083015260020154600160a060020a03811660a083015260ff60a060020a90910416151560c082015290935091501515612aef5760009850612c59565b806060015161ffff16816080015161ffff1611151515612b59576040805160e560020a62461bcd02815260206004820152601c60248201527f4e6f206672656520706f727473206f6e2070696e6e6564206e6f646500000000604482015290519081900360640190fd5b818784815181101515612b6857fe5b60209081029091018101919091528101518651879085908110612b8757fe5b67ffffffffffffffff1990921660209283029091019091015260808101518551869085908110612bb357fe5b61ffff90921660209283029091019091015260a08101518451859085908110612bd857fe5b600160a060020a03909216602092830290910182015260008381526003909152604090206001908101805461ffff60e060020a80830482168501909116027fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff9091161790559290920191612a1b565b612c5488888888886134a2565b600198505b5050505050505050919050565b600080612c71613894565b6060806060806000806000612c84613909565b600099505b6007548a1015612d7c57600780548b908110612ca157fe5b60009182526020918290206040805160a081018252600490930290910180548352600181015483850152600281015460ff811684840152600160a060020a0361010090910416606084015260038101805483518187028101870190945280845293949193608086019392830182828015612d3b57602002820191906000526020600020905b81548152600190910190602001808311612d26575b50505050508152505098508860800151516000148015612d675750886040015160ff1660028054905010155b15612d7157612d7c565b600190990198612c89565b6007548a10612d8e5760009a50613072565b612d978a613722565b886040015160ff16604051908082528060200260200182016040528015612dc8578160200160208202803883390190505b509750886040015160ff16604051908082528060200260200182016040528015612dfc578160200160208202803883390190505b509650886040015160ff16604051908082528060200260200182016040528015612e30578160200160208202803883390190505b509550886040015160ff16604051908082528060200260200182016040528015612e64578160200160208202803883390190505b50945060009350600092505b886040015160ff168360ff161015613060576002805485908110612e9057fe5b600091825260208083209091015480835260038252604092839020835160e08101855281548152600182015467ffffffffffffffff19680100000000000000008202169482019490945261ffff60c060020a850481169582019590955260d060020a84048516606082015260e060020a9093049093166080830152600290920154600160a060020a03811660a083015260ff60a060020a9091048116151560c08301528a5192945090925083918a918616908110612f4a57fe5b60209081029091018101919091528101518751889060ff8616908110612f6c57fe5b67ffffffffffffffff1990921660209283029091019091015260808101518651879060ff8616908110612f9b57fe5b61ffff90921660209283029091019091015260a08101518551869060ff8616908110612fc357fe5b600160a060020a03909216602092830290910182015260008381526003909152604090206001908101805461ffff60e060020a8083048216909401811684027fffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092169190911791829055606084015181169290910416111561304e57613049846137f4565b613055565b6001909301925b600190920191612e70565b61306d89898989896134a2565b60019a505b5050505050505050505090565b6130e9826001836040518082805190602001908083835b602083106130b55780518252601f199092019160209182019101613096565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092209291505061384d565b81600160a060020a03167fd211483f91fc6eff862467f8de606587a30c8fc9981056f051b897a418df803a826040518080602001828103825283818151815260200191508051906020019080838360005b8381101561315257818101518382015260200161313a565b50505050905090810190601f16801561317f5780820380516001836020036101000a031916815260200191505b509250505060405180910390a25050565b60808101515160009015613239573360009081526008602090815260409182902084518155818501516001820155918401516002830180546060870151600160a060020a03166101000274ffffffffffffffffffffffffffffffffffffffff001960ff90941660ff19909216919091179290921691909117905560808401518051859392613225926003850192910190613945565b5090505061323233612872565b9050611b87565b6007805460018101808355600092909252835160049091027fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68881019182556020808601517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68983015560408601517fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68a830180546060890151600160a060020a03166101000274ffffffffffffffffffffffffffffffffffffffff001960ff90941660ff19909216919091179290921691909117905560808601518051879493613347937fa66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c68b909101920190613945565b50505050613232612c66565b6133bd826001836040518082805190602001908083835b602083106133895780518252601f19909201916020918201910161336a565b51815160209384036101000a600019018019909216911617905292019485525060405193849003019092209291505061386f565b81600160a060020a03167fbfec83d64eaa953f2708271a023ab9ee82057f8f3578d548c1a4ba0b5b700489826040518080602001828103825283818151815260200191508051906020019080838360008381101561315257818101518382015260200161313a565b600160a060020a038116151561343a57600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b6006805460018082019092556040805160e08101825282815260208082018a81524283850181905260608085018c905260808086018c905260a086018b905260c086018a90526000888152600586528790208651815593518051998501998a558086015160028601559687015160038501805493890151600160a060020a03166101000274ffffffffffffffffffffffffffffffffffffffff001960ff90931660ff1990951694909417919091169290921790915585015180519697919694959294929391926135789260048701920190613945565b50505060408201516005820155606082015180516135a0916006840191602090910190613945565b50608082015180516135bc916007840191602090910190613992565b5060a082015180516135d8916008840191602090910190613a06565b5060c082015180516135f4916009840191602090910190613aab565b5050875160408051858152602080820184905291810185905260c0606082018181528b51918301919091528a517f28c3d361196410d2059b40d53bf75ae21adebcec217c5a2564746ed2c3427fd2955087949387938d938d938d93608084019160a085019160e0860191818a01910280838360005b83811015613681578181015183820152602001613669565b50505050905001848103835286818151815260200191508051906020019060200280838360005b838110156136c05781810151838201526020016136a8565b50505050905001848103825285818151815260200191508051906020019060200280838360005b838110156136ff5781810151838201526020016136e7565b50505050905001995050505050505050505060405180910390a150505050505050565b6007546000190181146137e15760078054600019810190811061374157fe5b906000526020600020906004020160078281548110151561375e57fe5b6000918252602090912082546004909202019081556001808301549082015560028083018054918301805460ff191660ff909316929092178083559054600160a060020a0361010091829004160274ffffffffffffffffffffffffffffffffffffffff0019909116179055600380830180546137dd9284019190613b19565b5050505b6007805460001901906109889082613b59565b60025460001901811461383a5760028054600019810190811061381357fe5b906000526020600020015460028281548110151561382d57fe5b6000918252602090912001555b6002805460001901906109889082613b8a565b600160a060020a0316600090815260209190915260409020805460ff19169055565b600160a060020a0316600090815260209190915260409020805460ff19166001179055565b6040805160a081018252600080825260208201819052918101829052606080820192909252608081019190915290565b60408051610160810190915260008152602081016138e0613894565b815260200160008152602001606081526020016060815260200160608152602001606081525090565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b828054828255906000526020600020908101928215613982579160200282015b828111156139825782518255602090920191600190910190613965565b5061398e929150613baa565b5090565b8280548282559060005260206000209081019282156139fa579160200282015b828111156139fa578251825477ffffffffffffffffffffffffffffffffffffffffffffffff1916680100000000000000009091041782556020909201916001909101906139b2565b5061398e929150613bc7565b82805482825590600052602060002090600f01601090048101928215613a9f5791602002820160005b83821115613a6f57835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302613a2f565b8015613a9d5782816101000a81549061ffff0219169055600201602081600101049283019260010302613a6f565b505b5061398e929150613bfc565b828054828255906000526020600020908101928215613b0d579160200282015b82811115613b0d578251825473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03909116178255602090920191600190910190613acb565b5061398e929150613c1b565b8280548282559060005260206000209081019282156139825760005260206000209182015b82811115613982578254825591600101919060010190613b3e565b815481835581811115613b8557600402816004028360005260206000209182019101613b859190613c4c565b505050565b815481835581811115613b8557600083815260209020613b859181019083015b613bc491905b8082111561398e5760008155600101613bb0565b90565b613bc491905b8082111561398e57805477ffffffffffffffffffffffffffffffffffffffffffffffff19168155600101613bcd565b613bc491905b8082111561398e57805461ffff19168155600101613c02565b613bc491905b8082111561398e57805473ffffffffffffffffffffffffffffffffffffffff19168155600101613c21565b613bc491905b8082111561398e5760008082556001820181905560028201805474ffffffffffffffffffffffffffffffffffffffffff19169055613c936003830182613c9c565b50600401613c52565b5080546000825590600052602060002090810190610e2b9190613baa560077686974656c6973740000000000000000000000000000000000000000000000a165627a7a72305820e2b4d2098c8fcfea5ab0e2eafc3198b354123894f5baad3f07f88fef351914930029";

    public static final String FUNC_CHECKROLE = "checkRole";

    public static final String FUNC_ROLE_WHITELISTED = "ROLE_WHITELISTED";

    public static final String FUNC_HASROLE = "hasRole";

    public static final String FUNC_ADDNODE = "addNode";

    public static final String FUNC_REMOVEADDRESSESFROMWHITELIST = "removeAddressesFromWhitelist";

    public static final String FUNC_REMOVEADDRESSFROMWHITELIST = "removeAddressFromWhitelist";

    public static final String FUNC_RENOUNCEOWNERSHIP = "renounceOwnership";

    public static final String FUNC_ADDCODE = "addCode";

    public static final String FUNC_ADDADDRESSTOWHITELIST = "addAddressToWhitelist";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_GETCLUSTERSNODES = "getClustersNodes";

    public static final String FUNC_GETCLUSTERSINFO = "getClustersInfo";

    public static final String FUNC_WHITELIST = "whitelist";

    public static final String FUNC_GETREADYNODES = "getReadyNodes";

    public static final String FUNC_GETNODECLUSTERS = "getNodeClusters";

    public static final String FUNC_GETCLUSTER = "getCluster";

    public static final String FUNC_ADDADDRESSESTOWHITELIST = "addAddressesToWhitelist";

    public static final String FUNC_TRANSFEROWNERSHIP = "transferOwnership";

    public static final String FUNC_GETENQUEUEDCODES = "getEnqueuedCodes";

    public static final Event CLUSTERFORMED_EVENT = new Event("ClusterFormed", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}));
    ;

    public static final Event CODEENQUEUED_EVENT = new Event("CodeEnqueued", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event NEWNODE_EVENT = new Event("NewNode", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
    ;

    public static final Event ROLEADDED_EVENT = new Event("RoleAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event ROLEREMOVED_EVENT = new Event("RoleRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event OWNERSHIPRENOUNCED_EVENT = new Event("OwnershipRenounced", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}));
    ;

    @Deprecated
    protected Network(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Network(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Network(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Network(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public void checkRole(Address _operator, Utf8String _role) {
        throw new RuntimeException("cannot call constant function with void return type");
    }

    public RemoteCall<Utf8String> ROLE_WHITELISTED() {
        final Function function = new Function(FUNC_ROLE_WHITELISTED, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Bool> hasRole(Address _operator, Utf8String _role) {
        final Function function = new Function(FUNC_HASROLE, 
                Arrays.<Type>asList(_operator, _role), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<TransactionReceipt> addNode(Bytes32 nodeID, Bytes24 nodeAddress, Uint16 startPort, Uint16 endPort, Bool pinned) {
        final Function function = new Function(
                FUNC_ADDNODE, 
                Arrays.<Type>asList(nodeID, nodeAddress, startPort, endPort, pinned), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeAddressesFromWhitelist(DynamicArray<Address> _operators) {
        final Function function = new Function(
                FUNC_REMOVEADDRESSESFROMWHITELIST, 
                Arrays.<Type>asList(_operators), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> removeAddressFromWhitelist(Address _operator) {
        final Function function = new Function(
                FUNC_REMOVEADDRESSFROMWHITELIST, 
                Arrays.<Type>asList(_operator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> renounceOwnership() {
        final Function function = new Function(
                FUNC_RENOUNCEOWNERSHIP, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addCode(Bytes32 codeAddress, Bytes32 storageReceipt, Uint8 clusterSize, DynamicArray<Bytes32> pinnedNodeIDs) {
        final Function function = new Function(
                FUNC_ADDCODE, 
                Arrays.<Type>asList(codeAddress, storageReceipt, clusterSize, pinnedNodeIDs), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> addAddressToWhitelist(Address _operator) {
        final Function function = new Function(
                FUNC_ADDADDRESSTOWHITELIST, 
                Arrays.<Type>asList(_operator), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Address> owner() {
        final Function function = new Function(FUNC_OWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>> getClustersNodes() {
        final Function function = new Function(FUNC_GETCLUSTERSNODES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>>(
                new Callable<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>>() {
                    @Override
                    public Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>(
                                (DynamicArray<Bytes32>) results.get(0), 
                                (DynamicArray<Bytes24>) results.get(1), 
                                (DynamicArray<Uint16>) results.get(2), 
                                (DynamicArray<Address>) results.get(3));
                    }
                });
    }

    public RemoteCall<Tuple6<DynamicArray<Bytes32>, DynamicArray<Uint256>, DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>> getClustersInfo() {
        final Function function = new Function(FUNC_GETCLUSTERSINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint256>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint8>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple6<DynamicArray<Bytes32>, DynamicArray<Uint256>, DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>>(
                new Callable<Tuple6<DynamicArray<Bytes32>, DynamicArray<Uint256>, DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>>() {
                    @Override
                    public Tuple6<DynamicArray<Bytes32>, DynamicArray<Uint256>, DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<DynamicArray<Bytes32>, DynamicArray<Uint256>, DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>(
                                (DynamicArray<Bytes32>) results.get(0), 
                                (DynamicArray<Uint256>) results.get(1), 
                                (DynamicArray<Bytes32>) results.get(2), 
                                (DynamicArray<Bytes32>) results.get(3), 
                                (DynamicArray<Uint8>) results.get(4), 
                                (DynamicArray<Address>) results.get(5));
                    }
                });
    }

    public RemoteCall<Bool> whitelist(Address _operator) {
        final Function function = new Function(FUNC_WHITELIST, 
                Arrays.<Type>asList(_operator), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Address>>> getReadyNodes() {
        final Function function = new Function(FUNC_GETREADYNODES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Address>>>(
                new Callable<Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Address>>>() {
                    @Override
                    public Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Address>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Uint16>, DynamicArray<Address>>(
                                (DynamicArray<Bytes32>) results.get(0), 
                                (DynamicArray<Bytes24>) results.get(1), 
                                (DynamicArray<Uint16>) results.get(2), 
                                (DynamicArray<Uint16>) results.get(3), 
                                (DynamicArray<Uint16>) results.get(4), 
                                (DynamicArray<Address>) results.get(5));
                    }
                });
    }

    public RemoteCall<DynamicArray<Bytes32>> getNodeClusters(Bytes32 nodeID) {
        final Function function = new Function(FUNC_GETNODECLUSTERS, 
                Arrays.<Type>asList(nodeID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}));
        return executeRemoteCallSingleValueReturn(function);
    }

    public RemoteCall<Tuple7<Bytes32, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>> getCluster(Bytes32 clusterID) {
        final Function function = new Function(FUNC_GETCLUSTER, 
                Arrays.<Type>asList(clusterID), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes24>>() {}, new TypeReference<DynamicArray<Uint16>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple7<Bytes32, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>>(
                new Callable<Tuple7<Bytes32, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>>() {
                    @Override
                    public Tuple7<Bytes32, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<Bytes32, Bytes32, Uint256, DynamicArray<Bytes32>, DynamicArray<Bytes24>, DynamicArray<Uint16>, DynamicArray<Address>>(
                                (Bytes32) results.get(0), 
                                (Bytes32) results.get(1), 
                                (Uint256) results.get(2), 
                                (DynamicArray<Bytes32>) results.get(3), 
                                (DynamicArray<Bytes24>) results.get(4), 
                                (DynamicArray<Uint16>) results.get(5), 
                                (DynamicArray<Address>) results.get(6));
                    }
                });
    }

    public RemoteCall<TransactionReceipt> addAddressesToWhitelist(DynamicArray<Address> _operators) {
        final Function function = new Function(
                FUNC_ADDADDRESSESTOWHITELIST, 
                Arrays.<Type>asList(_operators), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<TransactionReceipt> transferOwnership(Address _newOwner) {
        final Function function = new Function(
                FUNC_TRANSFEROWNERSHIP, 
                Arrays.<Type>asList(_newOwner), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteCall<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>> getEnqueuedCodes() {
        final Function function = new Function(FUNC_GETENQUEUEDCODES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Bytes32>>() {}, new TypeReference<DynamicArray<Uint8>>() {}, new TypeReference<DynamicArray<Address>>() {}));
        return new RemoteCall<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>>(
                new Callable<Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>>() {
                    @Override
                    public Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<DynamicArray<Bytes32>, DynamicArray<Bytes32>, DynamicArray<Uint8>, DynamicArray<Address>>(
                                (DynamicArray<Bytes32>) results.get(0), 
                                (DynamicArray<Bytes32>) results.get(1), 
                                (DynamicArray<Uint8>) results.get(2), 
                                (DynamicArray<Address>) results.get(3));
                    }
                });
    }

    public List<ClusterFormedEventResponse> getClusterFormedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CLUSTERFORMED_EVENT, transactionReceipt);
        ArrayList<ClusterFormedEventResponse> responses = new ArrayList<ClusterFormedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            ClusterFormedEventResponse typedResponse = new ClusterFormedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.clusterID = (Bytes32) eventValues.getNonIndexedValues().get(0);
            typedResponse.codeAddress = (Bytes32) eventValues.getNonIndexedValues().get(1);
            typedResponse.genesisTime = (Uint256) eventValues.getNonIndexedValues().get(2);
            typedResponse.solverIDs = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(3);
            typedResponse.solverAddrs = (DynamicArray<Bytes24>) eventValues.getNonIndexedValues().get(4);
            typedResponse.solverPorts = (DynamicArray<Uint16>) eventValues.getNonIndexedValues().get(5);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<ClusterFormedEventResponse> clusterFormedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, ClusterFormedEventResponse>() {
            @Override
            public ClusterFormedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CLUSTERFORMED_EVENT, log);
                ClusterFormedEventResponse typedResponse = new ClusterFormedEventResponse();
                typedResponse.log = log;
                typedResponse.clusterID = (Bytes32) eventValues.getNonIndexedValues().get(0);
                typedResponse.codeAddress = (Bytes32) eventValues.getNonIndexedValues().get(1);
                typedResponse.genesisTime = (Uint256) eventValues.getNonIndexedValues().get(2);
                typedResponse.solverIDs = (DynamicArray<Bytes32>) eventValues.getNonIndexedValues().get(3);
                typedResponse.solverAddrs = (DynamicArray<Bytes24>) eventValues.getNonIndexedValues().get(4);
                typedResponse.solverPorts = (DynamicArray<Uint16>) eventValues.getNonIndexedValues().get(5);
                return typedResponse;
            }
        });
    }

    public Flowable<ClusterFormedEventResponse> clusterFormedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CLUSTERFORMED_EVENT));
        return clusterFormedEventFlowable(filter);
    }

    public List<CodeEnqueuedEventResponse> getCodeEnqueuedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CODEENQUEUED_EVENT, transactionReceipt);
        ArrayList<CodeEnqueuedEventResponse> responses = new ArrayList<CodeEnqueuedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CodeEnqueuedEventResponse typedResponse = new CodeEnqueuedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.codeAddress = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<CodeEnqueuedEventResponse> codeEnqueuedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, CodeEnqueuedEventResponse>() {
            @Override
            public CodeEnqueuedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(CODEENQUEUED_EVENT, log);
                CodeEnqueuedEventResponse typedResponse = new CodeEnqueuedEventResponse();
                typedResponse.log = log;
                typedResponse.codeAddress = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<CodeEnqueuedEventResponse> codeEnqueuedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(CODEENQUEUED_EVENT));
        return codeEnqueuedEventFlowable(filter);
    }

    public List<NewNodeEventResponse> getNewNodeEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(NEWNODE_EVENT, transactionReceipt);
        ArrayList<NewNodeEventResponse> responses = new ArrayList<NewNodeEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            NewNodeEventResponse typedResponse = new NewNodeEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<NewNodeEventResponse> newNodeEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, NewNodeEventResponse>() {
            @Override
            public NewNodeEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(NEWNODE_EVENT, log);
                NewNodeEventResponse typedResponse = new NewNodeEventResponse();
                typedResponse.log = log;
                typedResponse.id = (Bytes32) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<NewNodeEventResponse> newNodeEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(NEWNODE_EVENT));
        return newNodeEventFlowable(filter);
    }

    public List<RoleAddedEventResponse> getRoleAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEADDED_EVENT, transactionReceipt);
        ArrayList<RoleAddedEventResponse> responses = new ArrayList<RoleAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleAddedEventResponse typedResponse = new RoleAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.role = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleAddedEventResponse> roleAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RoleAddedEventResponse>() {
            @Override
            public RoleAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEADDED_EVENT, log);
                RoleAddedEventResponse typedResponse = new RoleAddedEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.role = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<RoleAddedEventResponse> roleAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEADDED_EVENT));
        return roleAddedEventFlowable(filter);
    }

    public List<RoleRemovedEventResponse> getRoleRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(ROLEREMOVED_EVENT, transactionReceipt);
        ArrayList<RoleRemovedEventResponse> responses = new ArrayList<RoleRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RoleRemovedEventResponse typedResponse = new RoleRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.role = (Utf8String) eventValues.getNonIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<RoleRemovedEventResponse> roleRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, RoleRemovedEventResponse>() {
            @Override
            public RoleRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(ROLEREMOVED_EVENT, log);
                RoleRemovedEventResponse typedResponse = new RoleRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.operator = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.role = (Utf8String) eventValues.getNonIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<RoleRemovedEventResponse> roleRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(ROLEREMOVED_EVENT));
        return roleRemovedEventFlowable(filter);
    }

    public List<OwnershipRenouncedEventResponse> getOwnershipRenouncedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, transactionReceipt);
        ArrayList<OwnershipRenouncedEventResponse> responses = new ArrayList<OwnershipRenouncedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipRenouncedEventResponse> ownershipRenouncedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipRenouncedEventResponse>() {
            @Override
            public OwnershipRenouncedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPRENOUNCED_EVENT, log);
                OwnershipRenouncedEventResponse typedResponse = new OwnershipRenouncedEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipRenouncedEventResponse> ownershipRenouncedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPRENOUNCED_EVENT));
        return ownershipRenouncedEventFlowable(filter);
    }

    public List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
            typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new io.reactivex.functions.Function<Log, OwnershipTransferredEventResponse>() {
            @Override
            public OwnershipTransferredEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
                OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
                typedResponse.log = log;
                typedResponse.previousOwner = (Address) eventValues.getIndexedValues().get(0);
                typedResponse.newOwner = (Address) eventValues.getIndexedValues().get(1);
                return typedResponse;
            }
        });
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    @Deprecated
    public static Network load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Network(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Network load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Network(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Network load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Network(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Network load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Network(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Network> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Network.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Network> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Network.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Network> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Network.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Network> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Network.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class ClusterFormedEventResponse {
        public Log log;

        public Bytes32 clusterID;

        public Bytes32 codeAddress;

        public Uint256 genesisTime;

        public DynamicArray<Bytes32> solverIDs;

        public DynamicArray<Bytes24> solverAddrs;

        public DynamicArray<Uint16> solverPorts;
    }

    public static class CodeEnqueuedEventResponse {
        public Log log;

        public Bytes32 codeAddress;
    }

    public static class NewNodeEventResponse {
        public Log log;

        public Bytes32 id;
    }

    public static class RoleAddedEventResponse {
        public Log log;

        public Address operator;

        public Utf8String role;
    }

    public static class RoleRemovedEventResponse {
        public Log log;

        public Address operator;

        public Utf8String role;
    }

    public static class OwnershipRenouncedEventResponse {
        public Log log;

        public Address previousOwner;
    }

    public static class OwnershipTransferredEventResponse {
        public Log log;

        public Address previousOwner;

        public Address newOwner;
    }
}
